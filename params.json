{"name":"Eoraptor.js","tagline":"A tiny logic-less, super-easy javascript template engine without any dependence.","body":"# eoraptor.js\r\n\r\nA mini expression javascript template engine without any dependence. Compatible with client-side and server-side.\r\n\r\n## Features\r\n\r\n1. Cleaner grammer than `mustache`.\r\n1. Without `with` statement in compiled function, recognized performance problems will be shielded.\r\n1. More detailed error logging.\r\n1. Build-in `index` support when iterating an array.\r\n1. Build-in `else if` support.\r\n1. TODO: Customizable output filter plugin.\r\n1. More useful partial template than `mustache`.\r\n1. Matching [eoraptor-jst](https://www.npmjs.org/package/eoraptor-jst) tool in npm package.\r\n\r\n## Unit test\r\n\r\nA quick glance at the [unit test](http://jias.github.io/eoraptor.js/test/test.html) maybe the most direct way to dive in.\r\n\r\n## Usage\r\n\r\n#### Client-side\r\n\r\nIncluding the eoraptor engine by script tag.\r\n\r\n```html\r\n<script src=\"path/to/eoraptor.min.js\"></script>\r\n```\r\n\r\nThe classic `hello world` example achieved through a variety of ways.\r\n\r\n###### Method 1：Compiling a template from a string parameter.\r\n\r\n```js\r\nvar hw = eoraptor.compile(\"Hello {{this.name}}!\");\r\nhw({\"name\": \"world\"});\r\n// \"Hello world!\"\r\n```\r\nUsually, this method is more suitable for compiling a pretty simple template.\r\n\r\n###### Method 2：Compiling templates from the script tags, with a `text/x-eoraptor` type and an unique `id` property.\r\n\r\n```html\r\n<script type=\"text/x-eoraptor\" id=\"hw\">\r\nHello {{this.name}}!\r\n</script>\r\n<script>\r\neoraptor.extract();\r\neoraptor.hw({\"name\": \"world\"});\r\n// \"Hello world!\"\r\n</script>\r\n```\r\n\r\n###### Method 3: Including the precompiled file which contains all template functions and rendering directly without calling`eoraptor.compile()` or `exraptor.extract()` api.\r\n\r\n```html\r\n<script src=\"path/to/eoraptor-precompiled.js\"></script>\r\n<script>\r\neoraptor.hw({\"name\": \"world\"});\r\n</script>\r\n</html>\r\n```\r\n\r\nThe name of `eoraptor-precompiled.js` file and the namespace of all templaltes，`eoraptor` in the example above, would be any other word as you like(a declaration in options of pre-compiling tool), and the content in the file would look like this:\r\n\r\n```js\r\n(function () {\r\n    // NOTE: The reality would be more complex than here\r\n    var ns = this[\"namespaceYouLike\"] || {};\r\n\r\n    ns[\"hw\"] = function (data){\r\n        var t__ = data, r__ = [];\r\n        r__.push(\"Hello \");\r\n        r__.push(t__.name);\r\n        r__.push(\"!\");\r\n        return r__.join(\"\");\r\n    };\r\n    // more functions\r\n    // ns[\"foo\"] = function (data) {};\r\n    // ...\r\n});\r\n```\r\n\r\nNOTE: The reality of `namespace declaration` would be more complex than here, more details will be found in pre-compiling section.\r\n\r\n## API\r\n\r\n#### Compiling and caching a template\r\n\r\n`eoraptor.compile(template)` / `eoraptor.compile(id, template)`\r\n\r\n* template: the template string.\r\n* id: a unique name will be used as the `key` for inner cache. If none, the `template` itself will be used instead.\r\n\r\nIn order to improve the performance of compiling, this method will save a cache for every template string, when the same template is passed in, it will skip the parsing step and return the cache directly.\r\n\r\nThe method returns a compiled `renderable` function with two properties, the `render` property is a reference to the function itself which takes one parameter as the context data. The `source` property is only the string form of the `render`, used by the pre-compile tool.\r\n\r\nDemo:\r\n\r\n```js\r\nvar fooTpl = eoraptor.compile('foo','{{this.foo}}');\r\n// method 1\r\nfooTpl.render(data);\r\n// method 2\r\nfooTpl(data);\r\n// method 3\r\neoraptor.foo(data);\r\n```\r\n\r\n#### Compiling templates from script tags\r\n\r\n`eoraptor.compile()` / `eoraptor.extract()`\r\n\r\nWhen the `compile` method is called with zero parameter, it will get the same effect of `extract` method, that all script tags with a \"text/x-eoraptor\" type and an unique id property will be processed as individual template definitions.\r\n\r\nDemo:\r\n\r\n```html\r\n<script id=\"sayMorning\" type=\"text/x-eoraptor\">\r\nGood morning, {{this.name}}!\r\n</script>\r\n<script id=\"sayAfternoon\" type=\"text/x-eoraptor\">\r\nGood afternoon, {{this.name}}!\r\n</script>\r\n\r\n<script type=\"text/javascript\">\r\neoraptor.compile();\r\neoraptor.sayMorning; // \"function\"\r\neoraptor.sayAfternoon; // \"function\"\r\n</script>\r\n```\r\n\r\nAfter calling the `extract`, the script tag will be added a `compiled` attribute, so it would be ignored in next calling.\r\n\r\n```html\r\n<script id=\"sayMorning\" type=\"text/x-eoraptor\" compiled=\"1\">\r\nGood morning, {{this.name}}!\r\n</script>\r\n```\r\n\r\n#### Setting delimeter\r\n\r\n`eoraptor.setDelimeter(start, end)`\r\n\r\n* start: optional, the start flag for delimeter, default to '{{'.\r\n* end: optional, the start flag for delimeter, default to '}}'.\r\n\r\nDemo:\r\n\r\n```js\r\neoraptor.setDelimiter('<%', '%>');\r\nvar tpl = eoraptor.compile('<%this.name%>');\r\ntpl({\"name\": \"eoraptor.js\"});\r\n// \"eoraptor.js\"\r\n```\r\n\r\n## Template\r\n\r\n#### variable\r\n\r\n`{{this.key}}` / `{{this[\"key\"]}}`\r\n\r\n* key: required, the direct value of the `key` in context data.\r\n\r\n> Under the hood, the function returned by `eoraptor.compile()` is builded without `with` statement, so the expression needs to start with `this.` prefix and it will not throw errors like `underscore`.\r\n\r\nDemo: output the value of the `key` in context data.\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"{{this.name}}\");\r\ntpl.render({\"name\": \"eoraptor.js\"});\r\n// \"eoraptor.js\"\r\n```\r\n\r\nDemo: if there is no such `key` in context data.\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"{{this.name}}\");\r\ntpl.render({});\r\n// \"\" empty string\r\n```\r\n\r\n#### html-escaped variable:\r\n\r\n`{{@this.key}}` / `{{@this[\"key\"]}}`\r\n\r\n* key: required, the direct value of the `key` in context data.\r\n\r\ndemo: output the html-escaped value of the `key` in context data.\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"{{@this.name}}\");\r\ntpl.render({\"name\": \"<h1> eoraptor.js </h1>\"});\r\n// \"&lt;h1&gt; eoraptor.js &lt;/h1&gt;\"\r\n```\r\n\r\n#### if block:\r\n\r\nSTART with: `{{#anyValue}}` / `{{#this.key}}` / `{{#this[\"key\"]}}` / `{{#anyValue vs anyValue}}`\r\n\r\n* anyValue: any value of any types like `foo`, `true`, `[]`, `{}`, etc.\r\n* key: required, the direct value of the `key` in context data.\r\n* vs: available comparation flags contains `==`, `===`, `!=`, `!==`, `>=`, `<=`, `>`, `<`\r\n\r\nEND with: `{{/}}`\r\n\r\nDemo: To determine whether the `if()` is like `true`, comparing by `==`.\r\n\r\n```js\r\nvar data = {\"foo\": 1};\r\nvar tpl = eoraptor.compile(\"{{#this.foo}}like true{{/}}\");\r\ntpl.render(data);\r\n// \"like true\"\r\n```\r\n\r\nDemo: To determine whether the `if()` is `true`, comparing by `===`.\r\n\r\n```js\r\nvar data = {\"foo\": 1};\r\nvar tpl = eoraptor.compile(\"{{#this.foo===true}}is true{{/}}\");\r\ntpl.render(data);\r\n// \"\" empty string\r\n```\r\n\r\n#### else if block:\r\n\r\nSTART with: `{{^anyValue}}` / `{{^this.key}}` / `{{^this[\"key\"]}}` / `{{^anyValue vs anyValue}}`\r\n\r\n* anyValue: any value of any types like `foo`, `true`, `[]`, `{}`, etc.\r\n* key: the direct value of the `key` in context data.\r\n* vs: available comparation flags contains `==`, `===`, `!=`, `!==`, `>=`, `<=`, `>`, `<`\r\n\r\nEND with: `{{/}}`\r\n\r\nDemo:\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"the number is {{#this.number === 1}}\"+\r\n    \"one\"+\r\n\"{{^this.number === 2}}\"+\r\n    \"two\"+\r\n\"{{/}}\");\r\ntpl.render({\"number\": 2});\r\n// \"the number is two\"\r\n```\r\n\r\n#### else block:\r\n\r\nSTART with: `{{^}}`\r\n\r\nEND with: `{{/}}`\r\n\r\nDemo:\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"the number is {{#this.number === 1}}\"+\r\n    \"one\"+\r\n\"{{^}}\"+\r\n    \"unknown\"+\r\n\"{{/}}\");\r\ntpl.render({});\r\n// \"the number is unknown\"\r\n```\r\n\r\n#### iteration block:\r\n\r\n`{{#this.key currentItem[ currentKey]}}`\r\n\r\n* key: required, the direct value of the `key` in context data.\r\n* currentItem: required, assign a variable to represent the current item in an iterative process.\r\n* currentKey: optional, default to `k__`, assign a variable to represent the current key in an iterative process. It will be a `number` value(like 0, 1, 2, etc.) or a `string` value determined by the iterative object, say, `array` or `object`.\r\n\r\nDemo: traversal of an array\r\n\r\n```js\r\nvar data = {\r\n    name: \"eoraptor\",\r\n    features: [\r\n        \"simple\",\r\n        \"standalone\"\r\n    ]\r\n};\r\nvar tpl = eoraptor.compile(\"<ul>\"+\r\n    \"{{#this.features item key}}\"+\r\n        \"<li>{{key}}. {{this.name}} is {{item}}</li>\"+\r\n    \"{{/}}\"+\r\n\"</ul>\");\r\ntpl.render(data);\r\n// \"<ul><li>0. eoraptor is simple</li><li>1. eoraptor is standalone</li></ul>\"\r\n```\r\n\r\nDemo: enumerating an object\r\n\r\n```js\r\nvar data = {\r\n    features: {\r\n        \"grammer\": \"simple\",\r\n        \"dependency\": \"standalone\"\r\n    }\r\n};\r\nvar tpl = eoraptor.compile(\"<ul>\"+\r\n    \"{{#this.features item key}}\"+\r\n        \"<li>{{key}}:{{item}}</li>\"+\r\n    \"{{/}}\"+\r\n\"</ul>\");\r\ntpl.render(data); \r\n// \"<ul><li>grammer:simple</li><li>dependency:standalone</li></ul>\"\r\n```\r\n\r\n#### comment block \r\n\r\n`{{!comment}}`\r\n\r\n* comment, any word for the commit.\r\n\r\nDemo:\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\"{{!hello}}eoraptor.js\");\r\ntpl.render(); // \"eoraptor.js\"\r\n```\r\n\r\n#### end of a block\r\n\r\n`{{/}}`\r\n\r\nYou can see it everywhere above.\r\n\r\n#### partial template\r\n\r\n`{{>partialName[ partialContext]}}`\r\n\r\n* partialName: required, the name of partial template\r\n* partialContext: optional, the data context for partial template function\r\n\r\nMost of time, each UI compontent in the page is coded by several people, and everyone has the responsibility to keep their code clean, so the `key` in the partial template may be the same as each other. As you will see in the code lower, both templates, `navi` and `slider`, have the `list` key, so it will not work correctly with a public context data.\r\n\r\n> Unless changing `list` into `naviList` and `sliderList`, but it's clearly violates the reused principle.\r\n\r\nAt this time, we can resolve the `key` conflict by assignasing an independent context data to partial template when defining a combined one.\r\n\r\nCompiling two partial templates for later use, say `navi` and `slider`:\r\n\r\n```js\r\neoraptor.compile('navi', '<ul>{{#this.list item}}'+\r\n    '<li>{{item.text}}</li>'+\r\n'{{/}}</ul>');\r\n\r\neoraptor.compile('slider', '<ul>{{#this.list item}}'+\r\n    '<li>{{item.img}}</li>'+\r\n'{{/}}</ul>');\r\n```\r\n\r\nBelow we compile and render a combined template, including two partial templates defined above.\r\n\r\n```js\r\nvar tpl = eoraptor.compile(\r\n    '<p>navi:</p>'+\r\n    '{{>navi this.navi}}'+\r\n    '<p>slider:</p>'+\r\n    '{{>slider this.slider}}'\r\n);\r\n\r\ntpl.render({\r\n    navi: {\r\n        list: [\r\n            {text: 'foo'}, {text: 'boo'}\r\n        ]\r\n    },\r\n    slider: {\r\n        list: [\r\n            {img: '1.jpg'}, {img: '2.jpg'}\r\n        ]\r\n    }\r\n});\r\n// output:\r\n//   <p>navi:</p>\r\n//   <ul><li>foo</li><li>boo</li></ul>\r\n//   <p>slider:</p>\r\n//   <ul><li>1.jpg</li><li>2.jpg</li></ul>\r\n```\r\n\r\n## License\r\n\r\nThe JavaScript Templates script is released under the [MIT license](http://opensource.org/licenses/MIT).\r\n\r\n## Author\r\n\r\n@gnosaij / [www.joy-studio.com](http://www.joy-studio.com)\r\n\r\n\r\n## Changelog\r\n\r\n* 2014-04-15\r\n  - `compile` method support zero parameter\r\n  - update grunt task\r\n* 2014-04-03\r\n  - add `extract` method\r\n* 2014-04-01\r\n  - add `eoraptor-jst` support\r\n* 2014-03-21\r\n  - initial version\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}